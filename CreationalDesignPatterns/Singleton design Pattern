Singleton Design Pattern
    This pattern ensures that only one instance of its kind exists and provides a single point of access to it from any part of the application.
    This not only guarantees a faster access and retrieval of the instance but also reduced the possibility of encountering an errror or exception.
Some of the Scenarios where the Singleton pattern is used :
Logging: Logging is a common use case for the Singleton pattern. 
         You may want to have a single logging instance throughout your application to centralize logging functionality.
Database Connections: In applications where you need to interact with a database, you might want to use a Singleton pattern to ensure there's only one database connection object that all parts of the application share.

